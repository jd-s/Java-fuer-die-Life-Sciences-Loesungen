package de.bit.pl2.ex07;

import com.github.javafaker.Faker;
import org.jgrapht.generate.GnpRandomGraphGenerator;
import org.jgrapht.graph.SimpleGraph;
import org.jgrapht.io.ComponentNameProvider;
import org.jgrapht.io.GmlExporter;
import org.jgrapht.io.IntegerComponentNameProvider;

import java.io.FileWriter;
import java.io.IOException;
import java.util.Random;
import java.util.function.Supplier;

public class RandomSocialNetwork {
    /**
     * This tool creates a random social network with generated fake persons.
     * The number of nodes/persons to be generated needs to be given as command line argument.
     * Since the connectance is related to the edge density, this implementation sets the edge probability as the
     * random variable for connectance.
     * The edge probability and the strength of the tie are generated by java.util.Random.
     * For the edge probability Random.nextFloat() is used with gives a random double in range [0,1].
     * For the random variable for strong and weak ties, Random.nextBoolean() is used which returns a random boolean
     * value.
     * The result is exported as a GML file.
     *
     * @param args The number of random created nodes.
     **/
    public static void main(String[] args) {
        try {
            int n = Integer.parseInt(args[0]);
            final Random r = new Random();

            Supplier<Person> nodeSupplier = new Supplier<Person>() {
                @Override
                public Person get() {
                    Faker faker = new Faker();
                    return new Person(faker.name().name(), faker.number().numberBetween(1, 100));
                }
            };

            Supplier<Connection> edgeSupplier = new Supplier<Connection>() {
                @Override
                public Connection get() {
                    return new Connection(r.nextBoolean());
                }
            };

            double p = r.nextFloat();
            SimpleGraph<Person, Connection> exampleGraph = new SimpleGraph<Person, Connection>(nodeSupplier, edgeSupplier, false);
            GnpRandomGraphGenerator<Person, Connection> randomGen = new GnpRandomGraphGenerator<Person, Connection>(n, p);

            randomGen.generateGraph(exampleGraph, null);
            System.out.printf("Graph generated with %s nodes and an edge probability of %.3f%n \n", n, p);

            ComponentNameProvider<Person> nodeName = new ComponentNameProvider<Person>() {
                public String getName(Person component) {
                    return component.getName();
                }
            };

            ComponentNameProvider<Connection> connectionName = new IntegerComponentNameProvider<Connection>();
            ComponentNameProvider<Person> nameName = new IntegerComponentNameProvider<Person>();
            ComponentNameProvider<Connection> connectionAtr = new ComponentNameProvider<Connection>() {
                public String getName(Connection component) {
                    if (component.isStrongTie()) {
                        return "strong";
                    }
                    return "weak";
                }
            };

            GmlExporter<Person, Connection> exporter = new GmlExporter(nameName, nodeName, connectionName, connectionAtr);
            exporter.setParameter(GmlExporter.Parameter.EXPORT_EDGE_LABELS, true);
            exporter.setParameter(GmlExporter.Parameter.EXPORT_VERTEX_LABELS, true);
            try {
                exporter.exportGraph(exampleGraph, new FileWriter("graph.gml"));
                System.out.println("Graph exported to graph.gml.");
            } catch (IOException e) {
                e.printStackTrace();
            }
        } catch (ArrayIndexOutOfBoundsException e) {
            System.err.println("Argument error: Please provide number of nodes as an argument.");
            System.exit(1);
        } catch (NumberFormatException e) {
            System.err.println("Number format error: Please provide an integer for number of nodes.");
            System.exit(1);
        }

    }

    static class Person {
        private String name;
        private int age;

        public Person(String name, int age) {
            this.name = name;
            this.age = age;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public int getAge() {
            return age;
        }

        public void setAge(int age) {
            this.age = age;
        }
    }

    static class Connection {
        private boolean strongTie;

        public Connection(boolean strongTie) {
            this.strongTie = strongTie;
        }

        public boolean isStrongTie() {
            return strongTie;
        }

        public void setStrongTie(boolean strongTie) {
            this.strongTie = strongTie;
        }
    }


}

